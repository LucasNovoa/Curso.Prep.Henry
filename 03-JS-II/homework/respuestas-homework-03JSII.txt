El “for” es un bucle que sirve para hacer tareas repetitivas. Un ciclo que se repite hasta que una condición especificada devuelva “false”. Este bucle tiene tres expresiones que se escriben entre paréntesis y separadas por punto y coma, seguidas de una sentencia que se ejecutará en bucle. La expresión inicial, de asignación o la declaración de variable típicamente se usa como variable contador. El resultado de esta expresión es descartado. Lugo sigue la condición que es una expresión para ser evaluada antes de cada paso por el bucle. Si el resultado es “true” se ejecuta la sentencia. Después de la condición sigue la expresión final, que será evaluada después de cada iteración del bucle. Generalmente se usa para incrementar o actualizar la variable contador. Finalmente, fuera de los paréntesis, tenemos la sentencia que se ejecutará mientras la condición sea evaluada como “true”. Si la condición se evalúa como “false”, la ejecución pasa a la primera expresión que sigue al “for”. 

Los operadores lógicos son algo así como operadores matemáticos para tipos de datos booleanos. El tipo de dato lógico o booleano es aquel que puede representar valores de lógica binaria, esto es 2 valores, que normalmente representan falso o verdadero. Estos operadores reciben dos operandos , según el operador utilizado y el valor de los operandos, devuelve un resultado: “true” o “false”. El operador && (and) devolverá “true” solo si ambos operandos son “true”. El operador || (or) devolverá “true” si alguno de los operandos es “true”, es decir que devolverá “false” solo si ambos operandos son “false”. Para verificar esto existe una tabla de verdad para operadores lógicos que nos muestra el resultado de cada caso, según se utilice && u ||. Luego tenemos al operador negación, se esctibe “!” (not), que devuelve la negación de su único operando.
